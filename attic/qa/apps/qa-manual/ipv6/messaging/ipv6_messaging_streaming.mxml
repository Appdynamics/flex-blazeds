<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="100%" height="100%" creationComplete="startTest()">

	<mx:Script>
		<![CDATA[
		import mx.events.PropertyChangeEvent;				
		
		/*************************************************************************************
		*   This example tests the usage of IPv6 address in the MessagingService destination.
		*   The destination setting in the messaging-config.xml as below
		* 
		*	<destination id="MyTopic">
		*		<channels>           
		*    			<channel ref="data-polling-amf"></channel>
		*		   	<channel ref="data-secure-polling-amf"></channel>    
		*			<channel ref="qa-streaming-amf"></channel>
		*		</channels>
		*	</destination>		
		* 
		*   Request the app with an IPv6 address (global IPv6 address and [::1]) and change
		*   the targetUrl accordingly.
		**************************************************************************************/
		
		import mx.messaging.channels.StreamingAMFChannel;	
		import mx.messaging.channels.AMFChannel;
		import mx.messaging.messages.AsyncMessage;
		import mx.messaging.Producer;
		import mx.messaging.Consumer;	
		import mx.messaging.ChannelSet;		    
		import mx.messaging.Channel;	    		
		import mx.messaging.events.*;
		import qa.mxunit.*;
		
		private var consumer:Consumer;
		private var producer:Producer;
		private var targetUrl:String = "[::1]";
		private var dest:String = "MyTopic";
			
		private var producerResultType:String = "";
		private var consumerResult:String = "";
		
		private function startTest():void
		{
			var cs:ChannelSet = new ChannelSet();
			var ch:StreamingAMFChannel = new StreamingAMFChannel("qa-streaming-amf", "http://" +targetUrl + ":8400/qa-manual/messagebroker/streaming-amf");
			// optional you can use other channels
			//var ch:AMFChannel = new AMFChannel("data-polling-amf", "http://" +targetUrl + ":8400/qa-manual/messagebroker/amfpolling");
			//ch.pollingInterval = 2;
			//ch.pollingEnabled = true;
			cs.addChannel(ch);
								
			producer = new Producer();
			producer.destination = dest;
			producer.addEventListener(MessageAckEvent.ACKNOWLEDGE, proAcknowledgeHandler);
			producer.addEventListener(MessageFaultEvent.FAULT, proFaultHandler);
			producer.channelSet = cs;

			consumer = new Consumer();
			consumer.destination = dest;
			consumer.addEventListener(MessageEvent.MESSAGE, messageHandler);
			consumer.addEventListener(MessageFaultEvent.FAULT, messageFaultHandler);
			consumer.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler); 
			consumer.channelSet = cs;	
			consumer.subscribe();
		}
						
		private function send():void
		{
			var message:AsyncMessage = new AsyncMessage();
			message.body = {
			    msg: ti_msg.text
			};
			producer.send(message);	
			
			MXUnitManager.delay = 3000;
			MXUnitManager.addTests(this, ["testProResult", "testConResult"], 3000);
		}
		
		private function propertyChangeHandler(event:PropertyChangeEvent):void
		{
			// kick off the test only if the consumer subscription is successful
			if (event.property == "subscribed" && consumer.subscribed == true)
			{
				send();
			}
		}
		
		private function messageFaultHandler(event:MessageFaultEvent):void
		{			
			log("ConsumerFault:"+ event.faultDetail);			
		}
		 
		private function messageHandler(event:MessageEvent):void
		{		   		   			   	
			log("ConsumerMessage: " + event.message.body.msg);
			consumerResult = event.message.body.msg;
		}
		
		private function proAcknowledgeHandler(event:MessageAckEvent):void
		{
			log("Ack received");	
			producerResultType = "ack";
		}
		
		public function proFaultHandler(event:MessageFaultEvent):void
		{			
			log("ProducerFault: " + event.faultDetail);
			producerResultType = "fault";
		}
		
		private function log(s:String):void
		{
			ta.text += s + "\n";
		}
		
		public function testConResult():void
		{			
			Assert.assertEquals("Expect a consumer result event", ti_msg.text, consumerResult);
			
			// cleanup
			consumer.removeEventListener(MessageEvent.MESSAGE, messageHandler);
			consumer.removeEventListener(MessageFaultEvent.FAULT, messageFaultHandler);
			consumer.unsubscribe();
			consumer.disconnect();
					
		}
		
		public function testProResult():void
		{
			Assert.assertEquals("Expect an acknowledge message", "ack", producerResultType);
			// cleanup
			producer.removeEventListener(MessageAckEvent.ACKNOWLEDGE, proAcknowledgeHandler);
			producer.removeEventListener(MessageFaultEvent.FAULT, proFaultHandler);
			producer.disconnect();	
		}

		]]>
	</mx:Script>
	
	<mx:TextArea id="ta" width="50%" height="30%" editable="false"/>
	
	<mx:HBox width="50%" paddingTop="0" paddingBottom="0">
		<mx:TextInput id="ti_msg" text="hello" width="90%"/>		
		<mx:Button label="Send" click="ta.text=producerResultType=consumerResult='';startTest()"/> 		
	</mx:HBox>
	
</mx:Application>