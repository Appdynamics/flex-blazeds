<?xml version="1.0" ?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
		
	<mx:HTTPService id="hs" url="/qa-manual/ipv6/proxyservice/httpService/basic.xml" 
		method="get" useProxy="true" result="onServiceResult(event)"  fault="onServiceFault(event)" />
	
	<mx:HTTPService id="hsFault" url="/qa-manual/ipv6/proxyservice/basic.xml"
		method="GET" useProxy="true"  fault="onServiceFaultTest(event)" />
	
	<mx:Script>	
	<![CDATA[

		/***********************************************************************************************************************
		*   This example tests the usage of IPv6 address in the dynamic URL whitelist
		*   in proxy service.  Modify the DefaultHttp destination in the proxy-config.xml as below
		*	<destination id="DefaultHTTP">
		*		<properties>
		*	            <dynamic-url>http://{server.name}:8400/{context.root}/ipv6/proxyservice/httpService/*</dynamic-url>
		*	        </properties>
		*	</destination>
		*   Request the app with an IPv6 address (global IPv6 address and [::1])
		*   Note: for ProxyService, it doesn't allow {server.port} variable.  Use the proper port on the target server
		***************************************************************************************************************************/

		import qa.mxunit.*;
		import mx.rpc.events.*;
		import mx.rpc.AsyncToken;

		public var result:Object;
		public var type:String ="" ;
		public var faultType:String ="";
		public var faultString:String ="";

		public function onServiceResult(event:ResultEvent):void 
		{
			log("Result=" + result);
			if(event.token != null && event.token.op == "testResult")
			{
				Assert.assertTrue(true);
				Assert.hasPendingTest = false;
			}
			else
				log("Unknown result");
		}

		public function onServiceFault(event:FaultEvent):void 
		{
			log("http service fault: " + event.fault.faultString + " " + event.fault.faultDetail);
			Assert.fail("unexpected fault " );
			Assert.hasPendingTest = false;
		}

		public function onServiceFaultTest(event:FaultEvent):void 
		{			
			faultString = event.fault.faultString;
			log(faultString);
			Assert.assertTrue(faultString.indexOf("is not allowed by the selected destination") > -1);		
			Assert.hasPendingTest = false;
		}

		public function run():void 
		{
			MXUnitManager.delay = 6000;
			MXUnitManager.addTests(this,["testAttribute","testResult","testFault"],5000);
		}

		public function testAttribute():void 
		{
			Assert.assertTrue("useProxy should be TRUE", hs.useProxy == true);
			Assert.assertTrue("method should be GET", hs.method == "get");
			Assert.assertTrue("hs.lastResult should be event.result", hs.lastResult == result);
		}

		public function testResult():void 
		{			
			var token:AsyncToken = hs.send();
			token.op = "testResult";
		}

		public function testFault():void 
		{
			var token:AsyncToken = hsFault.send();
			token.op = "testFault";
		}

		public function log(s:String):void
		{
			ta.text += s + "\n";
		}

	]]>
	</mx:Script>
	<mx:TextArea id="ta" width="60%" height="50%" />

</mx:Application>