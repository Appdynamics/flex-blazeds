<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" width="1000" height="900" creationComplete="run()">
    <mx:Script>
        <![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.messaging.*;
			import mx.messaging.channels.*;
			import mx.messaging.config.*;
			import mx.messaging.errors.*;
			import mx.messaging.events.*;
			import mx.messaging.messages.*;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ArrayUtil;
	        /*************************************************************************************
			*   This is a general purpose app for testing messaging destinations and channels. 
			*   The app gets the list of messaging destinations from the ServerConfig objects and 
			*   diplays them in a drop down. When a destination is selected the list of channels 
			*   that are available for that destination are used to populate the channel drop downs 
			*   for the producer and the consumer. By selecting a channel for the producer and consumer
			*   you can then send and receive messages over the selected channels. The consumer can 
			*   can use a list of channels rather than a single channel to test failover scenarios. 
			**************************************************************************************/
	        ////////////////////////////////////////////////////////////////////////////
	        //
	        // Variables
	        //
	        ////////////////////////////////////////////////////////////////////////////             
            [Bindable]
            /**
            * Used to store the list of channels available for the selected destination.
            */ 
            public var availableChannels:Array = new Array();

            [Bindable]
            /**
            * Consumer instance used to receive messages from the selected destination. 
            */  
            public var ro:RemoteObject = new RemoteObject();
            [Bindable]
            /**
            * Used to store channels used by the consumer. Consumer can have multiple channels
            * to test failover rather that just using the selected cheannel in the channels drop down.
            */ 
            private var roChannels:ArrayCollection = new ArrayCollection(); 
            /**
            * Default destination to have selected in the destinations drop down. 
            */ 
            public var defaultDestination:String = "Echo_LoginAfterDisconnect"; 
            [Bindable]
            /**
            * List of messaging destination retrieved from ServerConfig
            */
            public var destinations:XMLList;   
            /**
            * Keeps track of the last selected destination in the destinations drop down. 
            */ 
            public var lastSelected:int;
            /**
            * Number of messages received by the Consumer. 
            */  
            public var messageCount:int = 0; 
            /**
            * When sending a burst of messages, this is the number of messages that have been sent.  
            */
            public var messageIterator:int = 0;
            /**
            * Number of messages to have the producer send in a burst. Messages are sent at the interval 
            * used by the timer sendTimer 
            */
            public var numMessages:int = 1000;

            /**
            * Timer used when sending a burst of messages. 
            */   
            public var sendTimer:Timer = new Timer(10);
	        ////////////////////////////////////////////////////////////////////////////
	        //
	        // Methods
	        //
	        ////////////////////////////////////////////////////////////////////////////             
	        /**
	        * Initialize the app by retrieving the list of messaging destinations from the ServerConfig
	        * object and setting up event handlers for the producer and consumer.  
	        */
            public function run():void {
                sendTimer.addEventListener(TimerEvent.TIMER, messageTimerHandler); 
                availableChannels = (ServerConfig.getChannelSet(defaultDestination) as ChannelSet).channelIds;  
                var xml:XML = ServerConfig.serverConfigData;                
                destinations = xml.service.(@id == "remoting-service").destination.attribute("id");                                       
                ro.destination = defaultDestination;                
                
                var destArray:Array = ArrayUtil.toArray(destinations_cb.dataProvider); 
                for (var i:int = 0; i < destArray[0].length; i++) 
                {
                    if (destArray[0][i].toString() == defaultDestination) 
                    {
                        destinations_cb.selectedIndex = i;  
                        lastSelected = i;  
                        break;
                    }                                
                }                                
                
                ro.addEventListener(ResultEvent.RESULT, roEventHandler);
                ro.addEventListener(FaultEvent.FAULT, roEventHandler);
                ro.addEventListener(ChannelFaultEvent.FAULT,roEventHandler);
				ro.addEventListener(ChannelEvent.DISCONNECT, roEventHandler);
                

            }
            /**
            * Call the remote object
            */  
            public function createRO():void
            {
				var channelStr:String = ro_channels_cb.selectedItem as String;
				if (ro.channelSet == null || (ro.channelSet.currentChannel != null && ro.channelSet.currentChannel.id != channelStr) ) { 
                	var channelSet:ChannelSet = new ChannelSet();    
                    var channel:Channel = ServerConfig.getChannel(channelStr);
                    channelSet.addChannel(channel);                                
                    ro.channelSet = channelSet;    
                } 					                    
				ro.echoString(message_field.text);
            }
			
			/**
			 * Login the remote object
			 */  
			public function loginRO():void
			{
				var channelStr:String = ro_channels_cb.selectedItem as String;
				if (ro.channelSet == null || (ro.channelSet.currentChannel != null && ro.channelSet.currentChannel.id != channelStr) ) { 
					var channelSet:ChannelSet = new ChannelSet();    
					var channel:Channel = ServerConfig.getChannel(channelStr);
					channelSet.addChannel(channel);                                
					ro.channelSet = channelSet;    
				} 					                    
				var token:AsyncToken = ro.channelSet.login(username_field.text, password_field.text); 
				token.op = "login"; 
				token.addResponder(new AsyncResponder(loginLogoutHandler,loginLogoutHandler,token)); 
			}
			
			private function loginLogoutHandler(result:Object, token:AsyncToken):void
			{
				var cs:ChannelSet;
				var fe:FaultEvent; 
				if (token.op == "login") 
				{
					if (result is ResultEvent) {
						logRO("Login successful");						
					} else if (result is FaultEvent)
					{
						fe = result as FaultEvent;
						logRO("Login failed " + fe.fault.faultDetail);
					}
				} else if (token.op == "logout")
				{
					if (result is ResultEvent) {
						logRO("Logout successful");
					} else if (result is FaultEvent)
					{
						fe = result as FaultEvent;
						logRO("Logout failed " + fe.fault.faultDetail);
					}   
				}
			}
			
            /**
            * Add a channel to the RemoteObject's ChannelSet. If the remote object 
            * doesn't have a ChannelSet yet, create one.
            */ 
            public function addChannel():void
            {
            	if (ro.channelSet == null) 
            	{
            		ro.channelSet = new ChannelSet();  
            	}
            	var channelStr:String = ro_channels_cb.selectedItem as String;
            	var channel:Channel = ServerConfig.getChannel(channelStr);
            	ro.channelSet.addChannel(channel);             	
            	roChannels.addItem(channel); 
            }
			/**
            * Reset the ChannelSet for the RemoteObject. 
            */ 
            public function clearChannelSet():void 
            {
                if (ro.channelSet != null)
                {
                    ro.channelSet = null;
                    roChannels = new ArrayCollection();
                }
            }

			/**
			 * Have the remote object send a message. 
			 */ 
            public function sendMessage():void
            {
                var channelStr:String = ro_channels_cb.selectedItem as String;
                
                if (ro.channelSet == null || ro.channelSet.currentChannel.id != channelStr) {
                    var channelSet:ChannelSet = new ChannelSet();                
                    var channel:Channel = ServerConfig.getChannel(channelStr);
                    channelSet.addChannel(channel);       
                    ro.channelSet = channelSet;                             
                }
                ro.echoString("hello");
            }
            /**
			 * Handle events on the remote object.
			 */             
            public function roEventHandler(e:Event):void
            {                
                if (e is ChannelFaultEvent) 
                {
                    var cfe:ChannelFaultEvent = e as ChannelFaultEvent;
                    logRO("RO channel faulted: " + cfe.faultDetail);
                } else if (e is FaultEvent) 
                {
                    var fe:FaultEvent = e as FaultEvent;
                    logRO("RO received fault: " + fe.fault.faultString);
					logRO("Fault code: " + fe.fault.faultCode); 
					logRO("Fault Detail: " + fe.fault.faultDetail);
                }  else if (e is ResultEvent) 
                {
                    var re:ResultEvent = e as ResultEvent;
                   
                    messageCount++;
                    logRO("Received Message on "+ new Date());                
                    logRO(re.result as String);
                    logRO("Current message count= " + messageCount); 
                }         
            }
            /**
            * Used to log messages to the consumer log text field 
            */ 
            public function logRO(m:String):void
            {
                ro_out.text += m+ "\n";
            }
            /**
            * Timer event handler used when sending a burst of messages.
            */ 
            public function messageTimerHandler(event:TimerEvent):void {
                if (numMessages > messageIterator) {
                    messageIterator++;
                    sendMessage();    
                } else {
                    sendTimer.stop();    
                    messageIterator = 0;
                }
                
            }
            /**
            * Reset the count of the number of messages received by the consumer.
            */ 
            public function resetMessageCount():void {
                messageCount = 0;     
            }
            /**
            * Called when the destination drop down changes. If the remote object
            * is still connected trying to change the destination will result in an error. 
            */ 
            public function destinationChanged(event:ListEvent):void {
                if (ro.destination != destinations_cb.selectedLabel) 
                {
                    var destination:String = event.currentTarget.selectedLabel;
                    
                    if (ro.channelSet != null && ro.channelSet.connected) {
                        Alert.show("You must disconnect the RemoteObject to change the destination");
                        event.currentTarget.selectedIndex = lastSelected;
                           
                    } else { 
                        lastSelected = event.currentTarget.selectedIndex;                
                        ro.destination = destination;                        
                        availableChannels = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;
                    }
                }    
            }


        ]]>
    </mx:Script>
    <mx:Label text="Remoting Test" fontSize="16"/>
    <mx:ComboBox dataProvider="{destinations}" id="destinations_cb" change="destinationChanged(event)"/>
    <mx:HBox>
        <mx:VBox borderStyle="solid" borderThickness="2">
            <mx:Label text="RemoteObject"/>
                <mx:HBox>
                    <mx:TextArea width="300" height="300" id="ro_out"/>
                    <mx:Button label="clear" click="ro_out.text=''"/>    
                </mx:HBox>
                
            <mx:HBox>
                <mx:Label text="channels:"/>
                <mx:ComboBox id="ro_channels_cb" dataProvider="{availableChannels}"/>
            </mx:HBox>              
            <mx:HBox>
                <!-- <mx:Button label="CreateRO" click="createRO()" enabled="{!ro.channelSet.connected}"/> -->
                <mx:Button label="CallRO" click="createRO();"/>  
				<mx:HBox>
					<mx:Label text="message"/>
					<mx:TextInput id="message_field" width="200"/>           
				</mx:HBox>
            </mx:HBox> 
			<mx:HBox>
				<mx:Button label="Login" click="loginRO();"/>  
				<mx:HBox>
					<mx:Label text="username"/>
					<mx:TextInput id="username_field" width="200"/>           
				</mx:HBox>
				<mx:HBox>
					<mx:Label text="password"/>
					<mx:TextInput id="password_field" width="200"/>           
				</mx:HBox>
			</mx:HBox>  
            <mx:HBox>
                <mx:Button label="Disconnect" click="ro.disconnect();" enabled="{ro.channelSet.connected}"/>
                <mx:Button label="Add Channel" click="addChannel()"/>   
                <mx:Button label="Clear ChannelSet" click="clearChannelSet()"/>                                  
            </mx:HBox>    
			<mx:HBox>
	            <mx:DataGrid id="channelsGrid" dataProvider="{roChannels}" width="600">
				    <mx:columns>
				      <mx:Array>
				        <mx:DataGridColumn headerText="endpoint" dataField="endpoint" visible="true" />
				        <mx:DataGridColumn headerText="connected" dataField="connected" visible="true" />
				        <mx:DataGridColumn headerText="authed" dataField="authed" visible="true" />        
				        <mx:DataGridColumn headerText="pollingEnabled" dataField="pollingEnabled" visible="true" />     
					<mx:DataGridColumn headerText="pollingInterval" dataField="pollingInterval" visible="true" />     
				       </mx:Array>
				    </mx:columns>    
	            </mx:DataGrid>
			</mx:HBox>
            <mx:HBox>                               
                <mx:Button click="logRO('messageCount='+messageCount)" label="printMessageCount"/>
                <mx:Button click="messageCount=0;" label="resetMessageCount"/>
            </mx:HBox>
        </mx:VBox>      
    </mx:HBox>
           
    <mx:TraceTarget level="0"/>
</mx:Application>