<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:qa="http://www.adobe.com/2006/flexqa"
                creationComplete="run()">
    
    <!--
        This application tests that a runtime-configured destination can work in a cluster.
        The MessageDest_clustered destination created in the RuntimeMessageDestinationClustered bootstrap service.
        To test this application you need to:
        1. Setup a cluster: make sure the nodes on the cluster discover each other.
        2. Uncomment the runtimeconfig.components.RuntimeMessageDestinationClustered service in services-config.mods.xml
        3. Build the qa-manual app
        4. Run this test
    -->
    <mx:Producer id="pro">
        <mx:destination>MessageDest_clustered</mx:destination> 
        <mx:fault>proFault(event)</mx:fault>
    </mx:Producer>
    
    <mx:Consumer id="con" destination="MessageDest_clustered"
                fault="conFault(event)" 
                message="msgReceived(event)" />

    
    <mx:Button label="Send msg" click="sendMsg()" />
    <mx:Button label="Clear" click="resetOutput()" />
    <mx:TextArea id="output" width="300" height="100" />
    <mx:Script>
    <![CDATA[

        import mx.messaging.*;
        import mx.messaging.events.*;
        import mx.messaging.messages.*;
        import mx.messaging.channels.*;

        import mx.logging.*;
        import mx.logging.targets.*;
        
        private var proFaultString:String = "";
        private var conFaultString:String = "";
        private var cs:ChannelSet;

        private function run():void
        {
            // Uncomment for client side logging
            /*
            var target:TraceTarget = new TraceTarget();
            target.includeLevel = true;
            target.filters = ["mx.messaging.*", "mx.rpc.*"];
            Log.addTarget(target);   
            */
                      
            setupProducer();
            setupConsumer(); 
        }

		//Test that a channel can be specified as "clustered" via AS: see ChannelSet(null, true) constructor
        private function setupProducer():void
        {
            cs = new ChannelSet(null, true);
            cs.addChannel(new AMFChannel("data-amf-polling-cluster", "http://localhost:8400/qa-manual/messagebroker/amfpollingcluster");
            pro.channelSet = cs;
        }

        private function setupConsumer():void
        {
            con.channelSet = cs;
            con.subscribe()
        }

        private function msgReceived(event:MessageEvent):void
        {
            output.text += event.message.body + "\n";
        }

        private function proFault(event:Object):void 
        {
            proFaultString = event.faultString;
        }

        private function conFault(event:Object):void 
        {
            conFaultString = event.faultString;
        }
        
        public function sendMsg():void
        {
            var msg:AsyncMessage = new AsyncMessage();
            msg.body = "Hola from qa-manual (in clustered flex server)";
            pro.send(msg);
        }
        
        public function resetOutput():void
        {
            output.text = "";
        }

    ]]>
    </mx:Script>  
	     
</mx:Application>