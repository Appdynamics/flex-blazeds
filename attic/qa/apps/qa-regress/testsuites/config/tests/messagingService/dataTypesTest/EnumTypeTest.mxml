<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" creationComplete="addTests()">
   <mx:TraceTarget level="0"/>
   <mx:RemoteObject id="ro" destination="remoting.enumtest">
        <mx:method name="getEnum" result="handleResult(event)" fault="handleFault(event)" />
        <mx:method name="echoEnum" result="handleResult(event)" fault="handleFault(event)" />
        <mx:method name="getEnumApple" result="handleAppleResult(event)" fault="handleFault(event)" />
    </mx:RemoteObject> 
   
    <mx:HBox>
        <mx:Button label="Get Enum" click="testEnum()" />
        <!-- testEchoEnum removed temporarilly for bug blz-343 -->
        <!-- <mx:Button label="Echo Enum" click="testEchoEnum()" /> -->
        <mx:Button label="Get EnumApple" click="testEnumApple()" />
    </mx:HBox>
    <mx:TextArea id="ta" width="100%" height="100%" />
   
    <mx:Script>
        <![CDATA[
        import mx.rpc.Fault;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
        import qa.mxunit.*;
        
        private var manager:MXUnitManager;
        public function addTests():void 
        {
        	manager = MXUnitManager.getInstance();
            manager.addTests(this, ["testEnum","testEchoEnum",  "testEnumApple", "testEnumMap"], 10000);
        }
        
        /**
        *    Test recieving an Enum from server
        **/
        public function testEnum():void{
            ro.getEnum("APPLE");
        }

        /*
        *    Test sending and recieving an Enum from server by sending as String
        *    a strong-typed Enum .as input
        */
        public function testEchoEnum():void{
	    ro.echoEnum(new EnumType("APPLE"));
        }
        
        
        /**
        *    Test recieving an Enum from server
        **/
        public function testEnumApple():void{
            ro.getEnumApple();           
        }

        public function testEnumMap():void
        {
        	manager.currentTest.tokenChain(ro.enumKeyMap(), verifyEnumMap);
        }
        
        
        private function verifyEnumMap(event:Object, token:Object):void
        {
        	Assert.assertTrue("Should have ResultEvent", event is ResultEvent);
        	Assert.assertEquals("AppleA", event.result.A );
        	Assert.assertEquals("AppleB", event.result.B);
        }
        
        public function handleResult(event:ResultEvent):void{
            log(event.result.toString() + " " + event.result);            
            Assert.assertEquals(new EnumType("APPLE"), event.result);
            Assert.hasPendingTest = false;
        }
        
        public function handleAppleResult(event:ResultEvent):void{
            log(event.result.toString() + " " + event.result.valueOf());
            for (var i:Object in event.result)
                    log( i + " " + event.result[i]);    
            Assert.assertEquals("A", event.result);
            Assert.hasPendingTest = false;   
        }
        
        public function handleFault(event:FaultEvent):void{
            log(event.fault.faultString);
            Assert.fail("there should be no fault -" + event.fault.faultString);
        }
        
        public function log(s:String):void{
            ta.text += s + "\n";
        }
            
        ]]>
    </mx:Script>
</mx:Application>
