<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
    	import mx.events.PropertyChangeEvent;
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.ChannelSet;
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        *  Consumer instance used in the test
        */           
        public var con:Consumer;
        
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopic";          
        
        /**
         *  Allows handlers to be removed, queued, etc. across async response handling.
         */
        public static var handler:Function;           
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        *  Array of test names. Test name will be based on the channel 
        */    
        public var testNames:Array = new Array();                      
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests using the list of 
        *  channels available for the destination. This will cause the generic test method
        *  simpleMessageTest that is defined below to get run once per channel. 
        */
        public function setUp():void {    
            
           //get the list of channel names for the destination from ServerConfig 
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;           
                                            
           //create a new generic object to add test functions to
           var testObj:Object = new Object();  
                                           
           /*
            * Loop over the channel names and create a new test function for each channel. 
            * Even though the test function will have a new name it just points to our generic 
            * test function which will need to keep track of which test is being run. 
            */
           for (var i:int = 0; i < channelNames.length; i++) {               
               var channel:Channel = ServerConfig.getChannel(channelNames[i]);               
               var testName:String = "test_" + channel.id;               
               testObj[testName] = simpleMessageTest;                    
               testNames.push(testName);                                 
            }                                      
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                             
            //Call addTests giving it the object that contains all our test functions and an array of test names
            MXUnitManager.addTests(testObj,testNames, 5000);                        
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests.
        //
        ////////////////////////////////////////////////////////////////////////////       
        /**
		* This test tests that messages can be sent and received using a messaging destination that 
		* uses the ActionScriptAdapter adapter. This test get looped over for all channels available 
		* on the destination used in the test.     
		*/
        public function simpleMessageTest():void {  
                        
            //setup the consumer
            con = new Consumer(); 
            con.destination = destination;
            
            /*
             * Use the chain method to setup event handlers for the consumer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or a message event will cause the addAsync method to be removed from the stack.
             */
            manager.currentTest.chain(con,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageEvent.MESSAGE],consumerEventHandler);
                        
            //increment the counter to point to the next test
            var pointer:uint = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 			var cs:ChannelSet = new ChannelSet(); 			
			cs.addChannel(channel);
			
			//set the consumer and producer to use the new channel set then subscribe the consumer
			con.channelSet = cs; 
            con.subscribe();                           
            
        }

        
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerEventHandler(event:Event):void
        {   
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.assertContains("Consumer didn't get the correct error", "Cannot create 'FlexClient' with id '0'; another 'FlexClient' is already registered with the same id.", cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {            
                Assert.fail("Shouldn't have received message fault event.");                
            } else if (event is MessageEvent) {                     
               Assert.fail("Shouldn't have received message event.");                                                
            }
            //disconnect the consumer
            con.unsubscribe();
            con.disconnect();
        }
       
    ]]>
    </mx:Script>           
</mx:Application>