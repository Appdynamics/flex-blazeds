<?xml version="1.0" ?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setup()" >
		
	<mx:Script>
	<![CDATA[
	     
	     /*
	     *  Test case for HTTPProxyDestinationControlMBean
	     */
	    
	    import mx.rpc.Fault;
	    import mx.rpc.AsyncToken;
	    import mx.rpc.remoting.RemoteObject;
	    import mx.collections.ArrayCollection;
	    import mx.messaging.config.ServerConfig;
		import mx.messaging.ChannelSet;
		import mx.messaging.Channel;
		import mx.messaging.messages.HTTPRequestMessage;
	    import mx.rpc.events.InvokeEvent;	    
	    import mx.rpc.events.FaultEvent;
	    import mx.rpc.events.ResultEvent;
	    import mx.rpc.http.HTTPService;	    
	    import qa.mxunit.*;
	    
	     /*
         *  ro for MBeanServerGateway
         */
        private var ro:RemoteObject;
        
        /*
         *  remoteojbect for resolving MBean ObjectName. 
         */
        private var helper:RemoteObject;
        
        /*
         *   MBean ObjectName
         */
        private var mbeanName:String;
        
	    /*
        *  Array to hold names of channels that will be tested
        */       
        private var channelNames:Array;
        
        /*
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "multiheader_dest";   
        
        /*
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        private var index:int = 0; 
                
		private var manager:MXUnitManager = MXUnitManager.getInstance();
        
        private function setup():void
        {
            ro = new RemoteObject("RuntimeManagement");
	    ro.setCredentials("manager","manager1");
            
            helper = new RemoteObject("MBeanObjectNameResolver");
	    helper.setCredentials("manager","manager1");
    	    helper.addEventListener(ResultEvent.RESULT, handleHelperResult);
    	    helper.addEventListener(FaultEvent.FAULT, handleHelperFault);
    	    var token:AsyncToken = helper.getObjectNameForDestination("proxy-service", destination);
    	    token.op = "getMBeanName";
        }
        
        private function handleHelperResult(event:ResultEvent):void
        {
            if (event.token.op == "getMBeanName")
            {  
                mbeanName = event.result.toString();
                log("ObjectName=" + mbeanName);
                manager.addTests(this, ["testResetCount", "testInvokeHTTPFrequencyBefore", "testInvokeCount",  "testLastInvokeHTTPTimestamp", "testInvokeHTTPFrequencyAfter"], 10000);
            }
        }
        
        private function handleHelperFault(event:FaultEvent):void
        {
            log("GetMBeanName Fault:" + event.fault.faultDetail);
            Assert.fail("Fail to get MBean Object Name");
        }
        
         /*
         *  reset the count
         */
        public function testResetCount():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.invoke(mbeanName, "resetInvokeHTTPCount", null, null);
            token.op = "resetInvokeHTTPCount";
        }
        
        public function testInvokeCount():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            runHttpTest();
        }
        
        public function testLastInvokeHTTPTimestamp():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "LastInvokeHTTPTimestamp");
            token.op = "getLastInvokeHTTPTimestamp";
        }
        
        public function testInvokeHTTPFrequencyBefore():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeHTTPFrequency");
            token.op = "getInvokeHTTPFrequencyBefore";
        }
        
        public function testInvokeHTTPFrequencyAfter():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeHTTPFrequency");
            token.op = "getInvokeHTTPFrequencyAfter";
        }
                
        /*
         *   get the InvokeHTTPCount
         */
        private function getCount(op:String):void
        {
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeHTTPCount");
            token.op = op;
        }    
        
        public function handleROEvent(e:Event):void
        {            
            if (e is ResultEvent)
            {
                var event:ResultEvent = e as ResultEvent;    
                
                if (event.token.op == null)
                    return;
                    
                switch (event.token.op)
                {
                    case "getInvokeHTTPCount":
                        var count:Number = Number(event.result);
                        log("count=" + count);
                        Assert.assertEquals("There should be  " + channelNames.length + " HTTP invocation!", count, channelNames.length);
                        break;
                        
                    case "countAfterReset":
                        var rc:Number = Number(event.result);
                        log("countAfterReset=" + rc);
                        Assert.assertTrue("count should be reset to zero", rc==0);
                    break;
                    
                    case "resetInvokeHTTPCount":
                        log("count reset");
                        manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
                        getCount("countAfterReset");   
                    break;
                    
                    case "getInvokeHTTPFrequencyBefore":
                        var freqBefore:Number = event.result as Number;
                        log("InvokeHTTPFrequencyBefore=" + freqBefore);
                        Assert.assertTrue("InvokeHTTPFrequencyBefore should equal to zero", freqBefore==0);
                    break;
                    
                    case "getInvokeHTTPFrequencyAfter":
                        var freqAfter:Number = event.result as Number;
                        log("InvokeHTTPFrequencyAfter=" + freqAfter);
                        Assert.assertTrue("InvokeHTTPFrequencyAfter should be greater than zero", freqAfter>0);
                    break;
                    
                    case "getLastInvokeHTTPTimestamp":
                        var d:Date = event.result as Date;
                        log("LastInvokeHTTPTimestamp=" + d);
                        Assert.assertTrue("LastInvokeHTTPTimestamp should be today", d.getDate() == new Date().getDate());
                    break;
                }          
            }
            else if (e is FaultEvent)
            {
                var fe:FaultEvent = e as FaultEvent;
                log("FaultEvent:" + fe.fault.faultString ); 
                Assert.fail("There should be no fault" );
            }
        }
                
         /*
         *  Loop over all available channels for each test
         */
    	private	function runHttpTest():void {
    	   
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;           
           for (var i:int = 0; i < channelNames.length; i++) {
                httpTest();  
           }                    
        }
                        
		public function httpTest():void
		{   		    
		    var hs:HTTPService = new HTTPService();
		    hs.destination = destination;
		    
		    hs.useProxy = true;		    
		    hs.addEventListener(InvokeEvent.INVOKE, handleHttpInvoke);	
		    hs.addEventListener(ResultEvent.RESULT, httpTestEventHandler);
		    hs.addEventListener(FaultEvent.FAULT, httpTestEventHandler);    
		    
		    // send multiple header with same name in the request header(see bug BLZ-96)
		    hs.headers.type = ["mxml","as"];		
		   
		    //increment the counter to point to the next channel
            var pointer:uint = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 						
			//use the new channel set 
			hs.channelSet = new ChannelSet();
			hs.channelSet.addChannel(channel); 	
				
		    hs.send();
		}
		
		private function handleHttpInvoke(event:InvokeEvent):void
		{
		    var httpMessage : HTTPRequestMessage = HTTPRequestMessage(event.message);
            httpMessage.recordHeaders = true; 		  
		}
		
		public function httpTestEventHandler(event:Event):void
		{
		    // if all result/fault events come back, count again
		    index--;
		    if ( index== 0)
		        getCount("getInvokeHTTPCount");
		}
		
		private function log(s:String):void
		{
		    ta.text += s + "\n";
		}
		
	]]>
	</mx:Script>
	
	<mx:TextArea id="ta" width="50%" height="50%" />
</mx:Application>