<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startRun()">

    
    <mx:Script>
    <![CDATA[
        import mx.rpc.remoting.RemoteObject;
        import mx.messaging.config.ServerConfig;
        import mx.messaging.Channel;
        import mx.messaging.ChannelSet;
        import mx.messaging.Producer;
        import mx.messaging.Consumer;
        import mx.events.PropertyChangeEvent;
        import mx.rpc.events.*;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.events.*;   
        
        //--------------------------------------------------------------------------
        //
        // Variables
        // 
        //--------------------------------------------------------------------------
        private var con:Consumer;
        private var pro:Producer;
        private var destination:String = "topic_auth_send";
        private var timer:Timer;
        private var cs:ChannelSet;
        private var ch:Channel;
        private var ro:RemoteObject;  

        //--------------------------------------------------------------------------
        //
        // Setup 
        // 
        //--------------------------------------------------------------------------
        /**
         * @private
         */
        private function startRun():void { 
            ro = new RemoteObject(); 
            ro.destination = "SessionManager";
            cs = new ChannelSet(); 
            ch = ServerConfig.getChannel("qa-streaming-amf"); 
            cs.addChannel(ch);                                   
            MXUnitManager.getInstance().addTests(this,["testProducerWithNoCredentials","testProducerWithBadCredentials","testProducerWithValidCredentials","testConsumerNoCredProducerNoCred"],10000);                                    
        }
        //--------------------------------------------------------------------------
        //
        // Test Methods 
        // 
        //--------------------------------------------------------------------------              
        
        //testProducerWithNoCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and doesn't set any credendtials
         * gets an error.  
         */         
        public function testProducerWithNoCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination; 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proNoCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private 
         * Handle message fault event that is returned when producer with no credentials
         * sends a message to a destination with a send-security-constraint. 
         */
        private function proNoCredEventHandler(mfe:MessageFaultEvent):void {                                
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            cleanup();                                                       
        }
        //testProducerWithBadCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and uses an invalid set of credentials
         * gets an error. 
         */         
        public function testProducerWithBadCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination;
            pro.setCredentials("sampleuser","foo"); 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proBadCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private
         */
        private function proBadCredEventHandler(mfe:MessageFaultEvent):void {    
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            cleanup();           
        }  
        //testProducerWithValidCredentials              
       /**
        * Test that a producer that sends a message to a destination that 
        * uses a send-security-constraint and uses a valid set of credentials
        * doesn't get an authentication error. 
        */  
        public function testProducerWithValidCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination; 
            pro.setCredentials("sampleuser","samplepassword");
            pro.addEventListener(MessageFaultEvent.FAULT,proValidCredEventHandler);
            timer = new Timer(3000);              
            MXUnitManager.getInstance().currentTest.chain(timer,[TimerEvent.TIMER],proValidCredTimerHandler);
            timer.start(); 
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private
         */
        private function proValidCredEventHandler(e:MessageFaultEvent):void {
            Assert.fail("Credentials were valid, shouldn't have received fault: " + e.faultCode);                                 
        } 
        /**
         * @private
         */
        private function proValidCredTimerHandler(e:TimerEvent):void {
            pro.removeEventListener(MessageFaultEvent.FAULT, proValidCredEventHandler);
            cleanup();     
        } 
        //testConsumerNoCredProducerNoCred  
       /**
        * Test that a consumer can subscribe to a destination that uses a send-security-constraint
        * without supplying credentials and that a producer gets challenged.
        */  
        public function testConsumerNoCredProducerNoCred():void {                        
            con = new Consumer(); 
            con.channelSet = cs;
            con.destination = destination;
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination;            
            //con.addEventListener(MessageAckEvent.ACKNOWLEDGE,consumerAck); 
            MXUnitManager.getInstance().currentTest.chain(con,[MessageAckEvent.ACKNOWLEDGE],consumerAck);            
            con.subscribe();
            
        }
        /**
         * @private
         */
        private function conNoCredProNoCredEventHandler(e:MessageFaultEvent):void {
            Assert.fail("Credentials were valid, shouldn't have received fault: " + e.faultCode);                                 
        }
       /**
        *  Listen for consumer ack events so we can tell when the consumer has subscribed.    
        */
        private function consumerAck(event:MessageAckEvent):void {
            //make sure the ack is for a subscribe operation
            if((event.correlation is CommandMessage) && (CommandMessage(event.correlation).operation == CommandMessage.SUBSCRIBE_OPERATION))
            {
                pro.setCredentials("sampleuser","samplepassword");
                pro.addEventListener(MessageFaultEvent.FAULT,conNoCredProNoCredEventHandler);            
                MXUnitManager.getInstance().currentTest.chain(con,[MessageEvent.MESSAGE],consumerMessageEvent);                
                var message:AsyncMessage = new AsyncMessage();
                message.body = "hello";
                pro.send(message);
            } 
        }
        private function consumerMessageEvent(event:MessageEvent):void 
        {
            Assert.assertEquals("Got wrong message", "hello", event.message.body.toString());  
            pro.logout();    
        }
        private function cleanup():void {
            MXUnitManager.getInstance().currentTest.chain(ro,[FaultEvent.FAULT, ResultEvent.RESULT],sessionManagerResult); 
            ro.resetSession();  
        }
        private function sessionManagerResult(e:Event):void {
            //noop
            if(e is ResultEvent) 
            {
                trace("Got result from session reset."); 
            } else if (e is FaultEvent)
            {
                Assert.fail("Error attempting to reset session: " + (e as FaultEvent).fault.faultString);
                trace((e as FaultEvent).fault.faultString);
            }           
        }   
    ]]>
    </mx:Script>
</mx:Application>