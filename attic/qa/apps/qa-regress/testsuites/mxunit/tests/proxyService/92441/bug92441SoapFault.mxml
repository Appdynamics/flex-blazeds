<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"  creationComplete="initApp()">
    <mx:TextArea id="output" height="200" percentWidth="80"  x="38" y="353"/>
    <mx:TraceTarget level="8"/>

    <mx:Script>
        <![CDATA[
            import mx.rpc.AbstractService;
            import mx.rpc.AsyncToken;
            import mx.rpc.AbstractOperation;
            import mx.controls.Alert;
            import mx.utils.ObjectUtil;

            import flash.events.*;
            import mx.rpc.events.*;
            import mx.rpc.soap.*; 
            import qa.mxunit.*;
			import mx.rpc.events.*;
            
            // class borrowed from finder.mxml sdk app
			
			private static var WebServicePointer:AbstractService;
            private var ws:AbstractService ;
            private var result:Object;
			private var type:String;
			private var faultType:String;	
			private var obj:Object = new Object();
            private var actualSOAPRequest:XML;
            private var expectedSOAPResponse:String = "java.lang.NumberFormatException: For input string: \"A1\"";
            private var actualSOAPResponse:Object;

            private static function getWebService():AbstractService
            {
               if (WebServicePointer == null) {
                    var ws:WebService = new WebService();
                    ws.wsdl="/qa-regress/axis/services/echo?wsdl";
                    //ws.wsdl="echo.wsdl"; // use real web service, not mock-call by pointing the soap:address to the expected response
                    // NOTICE: This setting is necessary for proper error message handling            
                    // due to player bug #99307
                    ws.useProxy = true;
                    trace(" call getWebService() ");
                    ws.loadWSDL();
                    WebServicePointer = ws;
                }
                return WebServicePointer;
            }
			
            private function initApp():void{
                ws = getWebService();
                ws.addEventListener("fault", onServiceFault);
                ws.addEventListener("load", onServiceLoad);
            }
            private function onServiceLoad(event:Event):void {
                output.text += "-> Service load.\n";
                var o:Object = {inputInteger:'A1'};
                ops(o);
                MXUnitManager.delay = 6000;
				MXUnitManager.addTests(this,["Test_ValueOf_actualSOAPResponse"],10000);
            }
            private function onServiceFault(event:FaultEvent):void {
                trace("web service fault: " + event.fault.faultString);
                output.text += "-> Service fault: " + event.fault.faultCode + " - " + event.fault.faultString + ".\n";
            }
            private function onFault(event:FaultEvent):void {
                trace("operation fault: " + event.fault.faultString);
                output.text += "FaultEvent: faultCode " + event.fault.faultCode + " faultString " + event.fault.faultString + ".\n\n\n\n";
                actualSOAPResponse =  event.fault.faultString;
                output.text += "actualSOAPResponse " + actualSOAPResponse + "\n\n";
            }
            private function onResult(event:ResultEvent):void {

               trace("result: " + event.result);
               output.text += "event.result.varString " + event.result + "\n";
               
               output.text += "-> Result: " + ObjectUtil.toString(event.result) + ".\n";
               if(event.result != null){
			        output.text += "-> Passed \n";
			    }else{
			        output.text += "-> shound't be null " + event.result + ".\n";
			    }
               actualSOAPResponse = event.result;
            }            
            private function ops(input:Object):void{
			    var lOperation:AbstractOperation= ws.getOperation("echoInteger");
                lOperation.arguments.inputInteger = input.inputInteger;
                lOperation.addEventListener(ResultEvent.RESULT,onResult);
                lOperation.addEventListener(FaultEvent.FAULT, onFault);
                var op:Operation = lOperation as Operation;
                op.resultFormat = "object";
                var lCall:AsyncToken = ws.echoInteger();                
            }
            // public test function 
			public function Test_ValueOf_actualSOAPResponse():void {
			    if(actualSOAPResponse != null){
			        Assert.isTrue(actualSOAPResponse == expectedSOAPResponse.toString() , expectedSOAPResponse.toString());
			    }else{
			        Assert.fail("not null");
			    }
			} 
        ]]>
    </mx:Script>
</mx:Application>
