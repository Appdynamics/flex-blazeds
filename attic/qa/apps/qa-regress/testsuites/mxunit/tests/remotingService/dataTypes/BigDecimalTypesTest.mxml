<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro" invoke="addAsync()"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
    	import qa.Utils;    
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        [Bindable]
        public var dotNet:String;

        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;

        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;

		//When using a Number as the expected value, the following number causes a failure due to a loss of precision
        //private var expectedValue:Number = 1.7976931348623157;
	private var expectedValue:String = "123456789.79769313486231577976931348623157";
        private var expectedArray:Array = [expectedValue,null, "0"];

	private var expectedDotNetValue:String = "123456789.7976931348623157797";
        private var expectedDotNetArray:Array = [expectedDotNetValue,"0","0"];
        
        public function addAsync():void
        {
	    //Get runDotNet parameter from FlashVars or swf URL
	    var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
	    dotNet = paramObj["runDotNet"];

            manager.currentTest.chain(ro, ["result", "fault"], testHandler);    
        }

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                                 

            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testEchoBigDecimalAMF"],10000);
        }
        /**
        *  Test bigDecimal using amf channel
        **/
        public function testEchoBigDecimalAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimal(expectedDotNetValue);
            	call.expected = expectedDotNetValue;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimal(expectedValue);
            	call.expected = expectedValue;
	    }
        }
        
        /**
        *  Test negative bigDecimal value using amf channel
        **/
        public function testEchoNegativeBigDecimalAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimal("-" + expectedDotNetValue);
            	call.expected = "-" + expectedDotNetValue;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimal("-" + expectedValue);
            	call.expected = "-" + expectedValue;
	    }
        }

        /**
        *  Test null value using amf channel
        **/
        public function testEchoBigDecimalNullAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimal(null);
            	call.expected = "0";
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimal(null);
            	call.expected = null;
	    }
        }

        /**
        *  Test BigDecimal[] value using amf channel
        **/
        public function testEchoBigDecimalsAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimals(expectedDotNetArray);
            	call.expected = expectedDotNetArray;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimals(expectedArray);
            	call.expected = expectedArray;
	    }
        }

      

        //http
        /**
        *  Test bigDecimal using http channel
        **/
        public function testEchoBigDecimalHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimal(expectedDotNetValue);
            	call.expected = expectedDotNetValue;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimal(expectedValue);
            	call.expected = expectedValue;
	    }
        }
        
        /**
        *  Test bigDecimal with null value using http channel
        **/
        public function testEchoBigDecimalNullHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimal(null);
            	call.expected = "0";
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimal(null);
            	call.expected = null;
	    }
        }

        /**
        *  Test BigDecimal[] using http channel
        **/
        public function testEchoBigDecimalsHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigDecimals(expectedDotNetArray);
            	call.expected = expectedDotNetArray;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigDecimals(expectedArray);
            	call.expected = expectedArray;
	    }
        }

  

        private function testHandler(e:Object):void
        {
            if (e is FaultEvent)
            {
                if ((e.token.expectFault))
                {
                    Assert.pass();    
                }
                else
                {
                    Assert.fail(e.faultEvent.faultString);
                }
            }
            else
            {
            	trace("class type returned: " + Utils.getClassName(e.result));            	
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>