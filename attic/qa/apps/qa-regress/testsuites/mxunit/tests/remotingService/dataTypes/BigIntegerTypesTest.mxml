<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro" invoke="addAsync()"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
    	import qa.Utils;
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;

        [Bindable]
        public var dotNet:String;

        private var amfChannel:ChannelSet;
        private var httpChannel:ChannelSet;
       
        private var amfChannelac:ChannelSet;
        private var httpChannelac:ChannelSet;
       
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
		/*
			long (in Java): The long data type is a 64-bit signed two's complement integer. 
			It has a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807 (inclusive). 
			Use this data type when you need a range of values wider than those provided by int.
		*/
		private static var MAX_LONG_AS_STRING:String = "9223372036854775807";
        private var expectedValue:String = MAX_LONG_AS_STRING + MAX_LONG_AS_STRING;
        private var expectedArray:Array = [expectedValue,null,expectedValue];
        private var expectedDotNetArray:Array = [expectedValue,"0",expectedValue];

        public function addAsync():void
        {
	    //Get runDotNet parameter from FlashVars or swf URL
	    var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
	    dotNet = paramObj["runDotNet"];

            manager.currentTest.chain(ro, ["result", "fault"], testHandler);    
        }

        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                                 

            MXUnitManager.detectTests(this,100000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoBooleanClassesAMF"],10000);
        }
        
        /**
        *  Test BigInteger using amf channel
        **/
        public function testEchoBigIntegerAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigInteger(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *  Test BigInteger with nusing amf channel
        **/
        public function testEchoNegativeBigIntegerAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigInteger("-" + expectedValue);
            call.expected = "-" + expectedValue;
        }
        
        /**
        *  Test BigInteger with null value using amf channel
        **/
        public function testEchoBigIntegerNullAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigInteger(null);
            	call.expected = "0";
	    }
	    else
	    {
            	var call:Object = ro.EchoBigInteger(null);
            	call.expected = null;
	    }
        }

        /**
        *  Test BigInteger[] using amf channel
        **/
        public function testEchoBigIntegersAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigIntegers(expectedDotNetArray);
            	call.expected = expectedDotNetArray;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigIntegers(expectedArray);
            	call.expected = expectedArray;
	    }
        }

        
        //http
        /**
        *  Test BigInteger using http channel
        **/
        public function testEchoBigIntegerHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigInteger(expectedValue);
            call.expected = expectedValue;
        }
        
         /**
        *  Test BigInteger with null value using http channel
        **/
        public function testEchoBigIntegerNullHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigInteger(null);
            	call.expected = "0";
	    }
	    else
	    {
            	var call:Object = ro.EchoBigInteger(null);
            	call.expected = null;
	    }
        }

         /**
        *  Test BigInteger[] using http channel
        **/
        public function testEchoBigIntegersHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.EchoBigIntegers(expectedDotNetArray);
            	call.expected = expectedDotNetArray;
	    }
	    else
	    {
            	var call:Object = ro.EchoBigIntegers(expectedArray);
            	call.expected = expectedArray;
	    }
        }

        private function testHandler(e:Object):void
        {
            if (e is FaultEvent)
            {
                if ((e.token.expectFault))
                {
                    Assert.pass();    
                }
                else
                {
                    Assert.fail(e.faultEvent.faultString);
                }
            }
            else
            {
            	trace("class type returned: " + Utils.getClassName(e.result));
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>