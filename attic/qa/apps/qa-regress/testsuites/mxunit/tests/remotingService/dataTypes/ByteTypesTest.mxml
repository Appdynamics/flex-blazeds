<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro" invoke="addAsync()"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import mx.rpc.AsyncToken;
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;

        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        [Bindable]
        public var dotNet:String;
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;

        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;


        private var expectedValue:Number = 3;
        private var expectedArray:Array = [-3,0,3];
        private var expectedByteArray:ByteArray;
        private var expectedEmptyByteArray:ByteArray = new ByteArray();
        private var expectedByteClassesArrayWithNulls:ByteArray;
        private var expectedLargeByteArray:ByteArray = new ByteArray();
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        public function addAsync():void
        {
	    //Get runDotNet parameter from FlashVars or swf URL
	    var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
	    dotNet = paramObj["runDotNet"];

            manager.currentTest.chain(ro, ["result", "fault"], testHandler);    
        }
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        public function setUp():void
        {
            expectedByteArray = new ByteArray();
            expectedByteArray.writeByte(-3);
            expectedByteArray.writeByte(0);
            expectedByteArray.writeByte(3);
            expectedByteArray.position = 0;

            expectedByteClassesArrayWithNulls = new ByteArray();
            expectedByteClassesArrayWithNulls.writeByte(0);
            expectedByteClassesArrayWithNulls.writeByte(0);
            expectedByteClassesArrayWithNulls.writeByte(3);
            expectedByteClassesArrayWithNulls.writeByte(0xE7);
            expectedByteClassesArrayWithNulls.writeByte(0);
            expectedByteClassesArrayWithNulls.position = 0;
            
            // 177K - 22125 iterations
            // 180K - 22500 iterations
            for (var i:int = 0; i < 22800; i++)
               expectedLargeByteArray.writeUTFBytes("freeze!!");
               

            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));

            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                                 

            MXUnitManager.detectTests(this,30000);
            //MXUnitManager.addTests(this, ["testEchoByteClassesNullsAMF"], 10000);
        }
        
        /**
        *  Send a byte value to server to echo it back using amfChannel,
        *  assert the return value in testHandler. testHandler function
        *  compare the event result with the token.expected. 
        */
        public function testEchoByteAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByte(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test byte through http channel
        **/
        public function testEchoByteHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByte(expectedValue);
            call.expected = expectedValue;
        }

        //byte class
        /**
        *    Test Byte through amf channel
        **/
        public function testEchoByteClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByteClass(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Byte through http channel
        **/
        public function testEchoByteClassHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByteClass(expectedValue);
            call.expected = expectedValue;
        }


        //Byte class with null as parameter
        /**
        *    Test Byte with null through amf channel
        **/
        public function testEchoByteClassNullAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call: AsyncToken = ro.echoByteClass(null);
            	call.expected = 0;
	    }
	    else
	    {
            	var call: AsyncToken = ro.echoByteClass(null);
            	call.expected = null;
	    }
        }
        
        /**
        *    Test Byte with null through http channel
        **/
        public function testEchoByteClassNullHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call: AsyncToken = ro.echoByteClass(null);
            	call.expected = 0;
	    }
	    else
	    {
            	var call: AsyncToken = ro.echoByteClass(null);
            	call.expected = null;
	    }
        }



        // ByteArray
        /**
        *    Test byte[] with Actionscript ByteArray through amf channel
        **/
        public function testEchoBytesByteArrayAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoBytes(expectedByteArray);
            call.expected = expectedByteArray;
        }
        
        /**
        *    Test byte[] with Actionscript ByteArray through http channel
        **/
        public function testEchoBytesByteArrayHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoBytes(expectedByteArray);
            call.expected = expectedByteArray;
        }

        /**
        *    Test byte[] with Actionscript ByteArray through amf channel
        **/
        public function testEchoBytesByteArrayAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoBytes(expectedByteArray);
            call.expected = expectedByteArray;
        }
        
        /**
        *    Test byte[] with Actionscript ByteArray through http channel
        **/
        public function testEchoBytesByteArrayHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoBytes(expectedByteArray);
            call.expected = expectedByteArray;
        }


        //byte[]
        /**
        *    Test byte[] with Actionscript Array through amf channel
        **/
        public function testEchoBytesAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoBytes(expectedArray);
            call.expected = expectedByteArray;
        }
        
        /**
        *    Test byte[] with Actionscript Array through http channel
        **/
        public function testEchoBytesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoBytes(expectedArray);
            call.expected = expectedByteArray;
        }

        /**
        *    Test byte[] with Actionscript Array through amf channel
        **/
        public function testEchoBytesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoBytes(expectedArray);
            call.expected = expectedByteArray;
        }

        /**
        *    Test byte[] with Actionscript Array through amf channel
        **/
        public function testEchoBytesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoBytes(expectedArray);
            call.expected = expectedByteArray;
        }


        //byte[] using empty []
        /**
        *    Test byte[] with Actionscript ByteArray(no element) through amf channel
        **/
        public function testEchoBytesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoBytes(expectedEmptyByteArray);
            call.expected = expectedEmptyByteArray;
        }
           
        /**
        *    Test byte[] with Actionscript ByteArray(no element) through http channel
        **/
        public function testEchoBytesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoBytes(expectedEmptyByteArray);
            call.expected = expectedEmptyByteArray;
        }
        
        /**
        *    Test byte[] with Actionscript ByteArray(no element) through amf channel
        **/        
        public function testEchoBytesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoBytes(expectedEmptyByteArray);
            call.expected = expectedEmptyByteArray;
        }
        
        /**
        *    Test byte[] with Actionscript ByteArray(no element) through http channel
        **/
        public function testEchoBytesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoBytes(expectedEmptyByteArray);
            call.expected = expectedEmptyByteArray;
        }


        //byte[] -paremter null
        /**
        *    Test byte[] with null through amf channel
        **/
        public function testEchoBytesNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoBytes(null);
            call.expected = null;
        }
        
        /**
        *    Test byte[] with null through http channel
        **/
        public function testEchoBytesNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoBytes(null);
            call.expected = null;
        }

        /**
        *    Test byte[] with null through amf channel
        **/
        public function testEchoBytesNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoBytes(null);
            call.expected = null;
        }
        
        /**
        *    Test byte[] with null through amf channel
        **/
        public function testEchoBytesNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoBytes(null);
            call.expected = null;
        }


        //Byte[]
        /**
        *    Test Byte[] with Actionscript Array through amf channel
        **/
        public function testEchoByteClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByteClasses(expectedArray);
            call.expected = expectedByteArray;
        }

        /**
        *    Test Byte[] with Actionscript Array through http channel
        **/
        public function testEchoByteClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByteClasses(expectedArray);
            call.expected = expectedByteArray;
        }

        /**
        *    Test Byte[] with Actionscript Array through amf channel
        **/
        public function testEchoByteClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoByteClasses(expectedArray);
            call.expected = expectedByteArray;
        }
       
       /**
        *    Test Byte[] with Actionscript Array through http channel
        **/
        public function testEchoByteClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoByteClasses(expectedArray);
            call.expected = expectedByteArray;
        }


        /**
        *    Test Byte[] with Actionscript Array(no element) through amf channel
        **/
        public function testEchoByteClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByteClasses([]);
            call.expected = expectedEmptyByteArray;
        }
        
        /**
        *    Test Byte[] with Actionscript Array(no element) through http channel
        **/
        public function testEchoByteClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByteClasses([]);
            call.expected = expectedEmptyByteArray;
        }

        /**
        *    Test Byte[] with Actionscript Array(no element) through amf channel
        **/
        public function testEchByteClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoByteClasses([]);
            call.expected = expectedEmptyByteArray;
        }

        /**
        *    Test Byte[] with Actionscript Array(no element) through http channel
        **/
        public function testEchoByteClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoByteClasses([]);
            call.expected = expectedEmptyByteArray;
        }

        //Byte Classes - [null,null,3,-25,null]
        /**
        *    Test Byte[] with Actionscript ByteArray through amf channel
        *    value : [null,null,3,0xE7,null]
        **/
        public function testEchoByteClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByteClasses([null,null,3,0xE7,null]);
            call.expected = expectedByteClassesArrayWithNulls;
        }
        
        /**
        *    Test Byte[] with Actionscript ByteArrayArray through http channel
        *    value : [null,null,3,0xE7,null]
        **/
        public function testEchoByteClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByteClasses([null,null,3,0xE7,null]);
            call.expected = expectedByteClassesArrayWithNulls;
        }
        
        /**
        *    Test Byte[] with Actionscript ByteArray through amf channel
        *    value : [null,null,3,0xE7,null]
        **/
        public function testEchoByteClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoByteClasses([null,null,3,0xE7,null]);
            call.expected = expectedByteClassesArrayWithNulls;
        }
        
        /**
        *    Test Byte[] with Actionscript ByteArray through http channel
        *    value : [null,null,3,0xE7,null]
        **/
        public function testEchoByteClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoByteClasses([null,null,3,0xE7,null]);
            call.expected = expectedByteClassesArrayWithNulls;
        }

        /**
        *    Test for bug 192900
        *    Large Byte array greater than 180K        
        **/
        public function testEchoLargeByteArrayAMF():void
        {
            ro.channelSet = amfChannel;
            var call: AsyncToken = ro.echoByteClasses(expectedLargeByteArray);
            call.expected = expectedLargeByteArray;
        }
        
        /**
        *    Test for bug 192900
        *    Large Byte array greater than 180K        
        **/
        public function testEchoLargeByteArrayAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call: AsyncToken = ro.echoByteClasses(expectedLargeByteArray);
            call.expected = expectedLargeByteArray;
        }
        
        //Commenting these 2 tests due to Player Bug 212751
        
        /**
        *    Test for bug 192900
        *    Large Byte array greater than 180K  http channel      
        **/
        public function testEchoLargeByteArrayHTTP():void
        {
            ro.channelSet = httpChannel;
            var call: AsyncToken = ro.echoByteClasses(expectedLargeByteArray);
            call.expected = expectedLargeByteArray;
        }

        /**
        *    Test for bug 192900
        *    Large Byte array greater than 180K  http channel      
        **/
        public function testEchoLargeByteArrayHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call: AsyncToken = ro.echoByteClasses(expectedLargeByteArray);
            call.expected = expectedLargeByteArray;
        }



        private function testHandler(e:Object):void
        {
            if (e is FaultEvent)
            {
                if ((e.token.expectFault))
                {
                    Assert.pass();    
                }
                else
                {
                    Assert.fail(e.faultEvent.faultString);
                }
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.token.expected, e.result);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>