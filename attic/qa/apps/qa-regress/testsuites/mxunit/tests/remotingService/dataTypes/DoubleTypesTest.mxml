<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro" invoke="addAsync()"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        private var amfChannel:ChannelSet;
        private var httpChannel:ChannelSet;
       

        private var amfChannelac:ChannelSet;
        private var httpChannelac:ChannelSet;

        [Bindable]
        public var dotNet:String;
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;


        private var expectedValue:Number = 1.79769313486231e+308;
        private var expectedArray:Array = [Number.MIN_VALUE,0,Number.MAX_VALUE, 9007199254740992, -9007199254740992, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN];

        public function addAsync():void
        {
	    //Get runDotNet parameter from FlashVars or swf URL
	    var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
	    dotNet = paramObj["runDotNet"];

            manager.currentTest.chain(ro, ["result", "fault"], testHandler);    
        }

        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));    
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                                 

           MXUnitManager.detectTests(this,20000);

        }
        
        /**
        *echo max value and compare the return with string
        *in order to make sure the number reference have the required 
        *precision
        **/
        public function testEchoMaxDoubleAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDouble(expectedValue);
            call.expected = "1.79769313486231e+308";
        }
     
        //double class
        /**
        *    Test java Double through amf channel
        **/
        public function testEchoDoubleClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClass(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test java Double through http channel
        **/
        public function testEchoDoubleClassHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClass(expectedValue);
            call.expected = expectedValue;
        }
        


        /**
        *    Test java Double with null as parameter through amf channel
        **/
        public function testEchoDoubleClassNullAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClass(null);
            	call.expected = 0;
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClass(null);
            	call.expected = null;
	    }
        }
        
        /**
        *    test Double with null as parameter through http channel
        **/
        public function testEchoDoubleClassNullHttp():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClass(null);
            	call.expected = 0;
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClass(null);
            	call.expected = null;
	    }
        }

        /**
        *    test double[] through amf channel
        **/
        public function testEchoDoublesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test double[] through http channel
        **/
        public function testEchoDoublesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test Dodoubleuble[] through amf channel
        **/
        public function testEchoDoublesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test double[] through http channel
        **/
        public function testEchoDoublesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
     

        //double[] using empty []
        /**
        *    test double[] with empty array[] through amf channel
        **/
        public function testEchoDoublesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        /**
        *    test double[] with empty array[] through http channel
        **/
        public function testEchoDoublesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        
        /**
        *    test double[] with empty array[] through amf channel
        **/
        public function testEchoDoublesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        
        /**
        *    test double[] with empty array[] through http channel
        **/
        public function testEchoDoublesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }


        /**
        *    test double[] with null through amf channel
        **/
        public function testEchoDoublesNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;
        }
        /**
        *    test double[] with null through http channel
        **/
        public function testEchoDoublesNullHTTP():void
        {
            ro.channelSet = httpChannel;
	    var call:Object = ro.echoDoubles(null);
	    call.expected = null;
        }
        /**
        *    test double[] with null through amf channel
        **/
        public function testEchoDoublesNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;
        }
        /**
        *    test double[] with null through http channel
        **/
        public function testEchoDoublesNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;
        }

        //Double[]
        /**
        *    test Double[] through amf channel
        **/
        public function testEchoDoubleClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through http channel
        **/
        public function testEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through amf channel
        **/
        public function testEchoDoubleClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through http channel
        **/
        public function testEchoDoubleClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray));
        *    expected result: Array of numbers
        **/
        public function testArrayAsListEchoDoubleClassesAMF():void
        {
            ro.channelSet = amfChannel;
	    var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray));
        *    expected result: ArrayCollection of numbers
        **/
        public function testArrayCollectionEchoDoubleClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
	    var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(expectedArray);
        *    expected result: Array of numbers
        **/
        public function testArrayAsListEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: ArrayCollection of numbers
        **/
        public function testArrayCollectionEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannelac;
	    var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;
        }


        //Double[] - using []
        /**
        *    test Double[] with [] through amf channel    
        **/
        public function testEchoDoubleClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through http channel    
        **/
        public function testEchoDoubleClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through amf channel    
        **/
        public function testEchoDoubleClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through http channel    
        **/
        public function testEchoDoubleClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }

        //Double[] - using ArrayCollection()
        /**
        *    test Double[] with empty ArrayCollection through amf channel    
        **/
        public function testACEchoDoubleClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
	    var parameters: ArrayCollection = new ArrayCollection([]);
            var call:Object = ro.echoDoubleClasses(parameters);
            call.expected = parameters;

        }
        /**
        *    test Double[] with empty ArrayCollection through http channel    
        **/
        public function testACEchoDoubleClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
	    var parameters: ArrayCollection = new ArrayCollection([]);
            var call:Object = ro.echoDoubleClasses(parameters);
            call.expected = parameters;

        }
        /**
        *    test Double[] with empty ArrayCollection through amf channel    
        **/
        public function testACEchoDoubleClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
	    var parameters: ArrayCollection = new ArrayCollection([]);
            var call:Object = ro.echoDoubleClasses(parameters);
            call.expected = parameters;

        }
        /**
        *    test Double[] with empty ArrayCollection through http channel    
        **/
        public function testACEchoDoubleClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
	    var parameters: ArrayCollection = new ArrayCollection([]);
            var call:Object = ro.echoDoubleClasses(parameters);
            call.expected = parameters;

        }


        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [0,0,3.33,999,0];
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [null,null,3.33,999,null];
	    }

        }
        /**
        *    test Double[] through http channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [0,0,3.33,999,0];
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [null,null,3.33,999,null];
	    }

        }
        
        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [0,0,3.33,999,0];
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [null,null,3.33,999,null];
	    }

        }
        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
	    if (dotNet == "true")
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [0,0,3.33,999,0];
	    }
	    else
	    {
            	var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            	call.expected = [null,null,3.33,999,null];
	    }

        }


        //Java ArrayList
        /**
        *    Test Number in arrayList through amf channel
        **/
        public function testEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in arrayList through http channel
        **/
        public function testEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoArrayListAMFAC():void 
        {
            ro.channelSet = amfChannelac;
	    var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;

        }
        /**
        *    Test Number in arrayList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoArrayListHTTPAC():void   //this should fail, array-as-list is not used. it should only convert to []
        {
            ro.channelSet = httpChannelac;
	    var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;

        }


        //Java Vector
        /**
        *    Test Number in vector through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoVectorAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in vector through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoVectorHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in vector through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoVectorAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = new ArrayCollection(expectedArray);

        }
        /**
        *    Test Number in vector through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoVectorHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoVector(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);

        }
        /**
        *    Test Number in hashset through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testHashSetAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoHashSet([3]);
            call.expected = [3];
        }
        /**
        *    Test Number in hashset through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testHashSetHTTP():void
        {
           ro.channelSet = httpChannel;
           var call:Object = ro.echoHashSet([3]);
           call.expected = [3];
        }
        /**
        *    Test Number in hashset through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testHashSetAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoHashSet([3]);
            call.expected = new ArrayCollection([3]);
        }
        /**
        *    Test Number in hashset through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testHashSetHTTPAC():void
        {
           ro.channelSet = httpChannelac;
           var call:Object = ro.echoHashSet([33]);
           call.expected = new ArrayCollection([33]);
        }

        /**
        *    Test Number in LinkedList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoLinkedListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test Number in LinkedList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoLinkedListHTTP():void
        {
           ro.channelSet = httpChannel;
           var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test Number in LinkedList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoLinkedListAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLinkedList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        /**
        *    Test Number in LinkedList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoLinkedListHTTPAC():void
        {
           ro.channelSet = httpChannelac;
           var call:Object = ro.echoLinkedList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }


        private function testHandler(e:Object):void
        {
            if (e is FaultEvent)
            {
                if ((e.token.expectFault))
                {
                    Assert.pass();    
                }
                else
                {
                    Assert.fail(e.faultEvent.faultString);
                }
            }
            else
            {
               
                Assert.currentTest.doAssertEquals(String(e.result),String(e.token.expected));
            }
        }
    ]]>
    </mx:Script>

</mx:Application>