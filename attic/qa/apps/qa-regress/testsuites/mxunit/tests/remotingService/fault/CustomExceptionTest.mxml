<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="runTests()">
<mx:TraceTarget/>
    <mx:RemoteObject id="amfRo" destination="qa.amf.echoservice.Echo"
        result="reportFailure()"
        fault="VerifyFault(event.fault)"/>
    <mx:RemoteObject id="httpRo" destination="qa.http.echoservice.Echo"
        result="reportFailure()"
        fault="VerifyFault(event.fault)"/>

    <mx:Script>
    <![CDATA[
    import qa.mxunit.*;
    private var e:CustomException;
    private function runTests():void
    {
        MXUnitManager.detectTests(this, 3000);
    }
    /**
    *  Test Strong type custom exception through amf channel
    **/
    public function testAmfRO():void
    {
        amfRo.getCustomException();
        Assert.hasPendingTest = true;
    }
    /**
    *  Test Strong type custom exception through http channel
    *  RemoteObject throws a blazeds.qa.remotingService.CustomException and 
    *  deserialized as CustomException actionscript class instance
    **/
    public function testHttpRO():void
    {
        httpRo.getCustomException();
        Assert.hasPendingTest = true;
    }
    public function reportFailure():void
    {
        Assert.fail('Should not has result event');
        Assert.hasPendingTest=false
    }
    public function VerifyFault(fault:Object):void
    {
        Assert.assertTrue("Root Cause is CustomException : ", (fault.rootCause is CustomException));
        Assert.assertEquals("Root Cause Object reason: ", "some reason", fault.rootCause.reason);
        Assert.assertNotNull("faultString is not null:" + fault.faultString, fault.faultString)
        Assert.hasPendingTest = false;
    }
    ]]>
    </mx:Script>
</mx:Application>