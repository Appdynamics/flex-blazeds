<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="initApp()">
    <mx:RemoteObject id="roNonBind" destination="qa.echoservice.Echo" makeObjectsBindable="false"
        result="event.token.handler(event)" fault="event.token.handler(event)"/>
    <mx:RemoteObject id="roBind" destination="qa.echoservice.Echo" makeObjectsBindable="true"
        result="event.token.handler(event)" fault="event.token.handler(event)"/>
    <mx:RemoteObject id="ro" destination="qa.echoservice.Echo" makeObjectsBindable="true"
        result="event.token.handler(event)" fault="event.token.handler(event)"/>
    <mx:Panel width="200">
        <mx:Label id="roNonBind_lbl" text="{roNonBindObj.test}" />
        <mx:Label id="roBind_lbl" text="{roBindObj.test}" />
        <mx:Label id="ro_lbl" text="{roObj.test}" />
    </mx:Panel>
   
    
    <mx:Script>
        <![CDATA[
            import mx.rpc.events.FaultEvent;
            import mx.rpc.AsyncToken;
            import qa.mxunit.MXUnitManager;
            import qa.mxunit.Assert;
            
            [Bindable]
            public var roNonBindObj:Object;
            [Bindable]
            public var roBindObj:Object;
            [Bindable]
            public var roObj:Object;
            
            private var mxunitManager: MXUnitManager;
            
            private function initApp():void
            {
                mxunitManager = MXUnitManager.getInstance();
                var tests:Array = new Array();
                tests.push("testBindableFalse");
                tests.push("testBindableTrue");
                tests.push("testBindableDefault");
                mxunitManager.addTests(this, tests, 7000);
            }
            /**
            *    Test returned object's property is not bindable when bindable is false
            **/
            public function testBindableFalse():void
            {
                var async: Function = mxunitManager.currentTest.addAsync(verifyResult, "testBindableFalse");
                var call: AsyncToken = roNonBind.echoObject({test:"testBindableFalse"});
                call.handler = async;
            }
            /**
            *    Test returned object's property is  bindable when bindable is true
            **/
            public function testBindableTrue():void
            {
                var async: Function = mxunitManager.currentTest.addAsync(verifyResult, "testBindableTrue");
                var call: AsyncToken = roBind.echoObject({test:"testBindableTrue"});
                call.handler = async;
            }
            /**
            *    Test returned object's property is  bindable by default
            **/
            public function testBindableDefault():void
            {
                var async: Function = mxunitManager.currentTest.addAsync(verifyResult, "testBindableDefault");
                var call: AsyncToken = ro.echoObject({test:"testBindableDefault"});
                call.handler = async;
            }
            
            private function verifyResult(event:Object, testname:Object):void
            {
                if (event is FaultEvent)
                {
                    Assert.fail(event.fault.faultString);
                }
                else
                {
                    if (testname == "testBindableFalse")
                    {
                        Assert.assertEquals("testBindableFalse", event.result.test);
                        roNonBindObj = event.result;
                        roNonBindObj.test = "changeIt";
                        delayAssertEquals(testname, 1000);   
                    }
                    else if (testname == "testBindableTrue")
                    {
                        Assert.assertEquals("testBindableTrue", event.result.test);
                        roBindObj = event.result;
                        roBindObj.test = "changeIt";
                        delayAssertEquals(testname, 1000);   
                    }
                    if (testname == "testBindableDefault")
                    {
                        Assert.assertEquals("testBindableDefault", event.result.test);
                        roObj = event.result;
                        roObj.test = "changeIt2";
                        delayAssertEquals(testname, 1000);   
                    }
                }   
            }
            
            private function delayAssertEquals(testname: Object, delay:uint):void
            {
                var async: Function = mxunitManager.currentTest.addAsync(doDelayAssertEquals, testname);
                var timer:Timer = new Timer(delay, 1);
                timer.addEventListener(TimerEvent.TIMER, async);
                timer.start();
            }
            
            private function doDelayAssertEquals(event:Object, testname:Object):void
            {
                if (testname == "testBindableFalse")
                {
                    Assert.assertEquals("testBindableFalse", roNonBind_lbl.text);  
                }
                if (testname == "testBindableTrue")
                {
                    Assert.assertEquals("changeIt", roBind_lbl.text);  
                }
                if (testname == "testBindableDefault")
                {
                    Assert.assertEquals("changeIt2", ro_lbl.text);  
                }
            }
              
        ]]>
    </mx:Script>
</mx:Application>