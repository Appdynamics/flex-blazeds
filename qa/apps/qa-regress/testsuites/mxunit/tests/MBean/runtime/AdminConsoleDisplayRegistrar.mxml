<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
<mx:Script>
	<![CDATA[
		import mx.utils.ObjectUtil;
        import mx.rpc.remoting.RemoteObject;

        import mx.messaging.ChannelSet;
        import mx.messaging.channels.AMFChannel;

        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.IResponder;
        import mx.rpc.Fault;
        import mx.rpc.AsyncResponder;

        import qa.mxunit.MXUnitManager;
        import qa.mxunit.Assert;
        
        private var runtimeManagement:RemoteObject;
        private var nameResolver:RemoteObject;
        private var csAMF:ChannelSet;
        public static var handler:Function;  
        private var manager:MXUnitManager;
        private var MBeanObjectName:String;
        private var clientIds:Array;
        private var types:Array;
        
        
        private function run():void
        {
        	//configure the MXUnitManager           
            manager = MXUnitManager.getInstance();  
            
            runtimeManagement = new RemoteObject("RuntimeManagement");
            // for security-enabled Websphere
        	runtimeManagement.setCredentials("manager","manager1");
    	    
    	    MBeanObjectName = "flex.runtime.Console:MessageBroker=MessageBroker1,id=AdminConsoleDisplay,type=MessageBroker.AdminConsoleDisplay";    
    	    
    	    manager.addTests(this,["getId", "getType","getSupportedTypes","listForType" ],4000);                                                 
        }
    
     // this is useful for seeing the exposed attributes and operations
     /* public function getMbeanInfo():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getInfo","expected":"qa-polling-constraint-amf"});      
            var token:AsyncToken = runtimeManagement.getMBeanInfo(MBeanObjectName);
        }
        
     */  
        // get Attributes
        
        public function  getId():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getId","expected":"AdminConsoleDisplay"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Id");
        }
        
        public function  getType():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getType","expected":"AdminConsoleDisplay"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Type");
        }
        public function  getSupportedTypes():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getSupportedTypes","expected":"MessageBroker1"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "SupportedTypes");
            token.check = "SupportedTypes";
        }
        
        public function listForType():void
        {
            handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"listForType","expected":true}); 
            var token:AsyncToken = runtimeManagement.invoke(MBeanObjectName, "listForType", [ types[0] ], ["int"]);
            token.check = "length";
        }
        
        // event handlers  /////////////////////////////////
         
        public function invokeOperationHandler(event:Object = null, params:Object = null):void   
        {
           if (event is ResultEvent)
           {
              out.text += params.metric + " result: " + ObjectUtil.toString(event.result) + "\n";
              
              if (event.token.check == "length")
              {
                  Assert.assertTrue(event.result.length > 0 );
              }
              else if (event.token.check == "SupportedTypes" )
              {
                  types = event.result;
                  Assert.assertTrue(event.result.length > 0 );
              }
              else
              {	 
                 Assert.assertEquals(params.expected, event.result);
              }
           }
           else
           {
         	  out.text += ObjectUtil.toString(event.fault);
              Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: "
            		+ event.fault.faultCode);
           }
        }
       
    ]]>
</mx:Script>
<mx:TextArea id="out" width="90%" height="250"/>

</mx:Application>