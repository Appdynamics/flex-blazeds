<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:qa="http://www.adobe.com/2006/flexqa"  creationComplete="run()">
    
    <mx:Script>
    <![CDATA[
        /******************************************************************************
        *  test appropriate warnings when: 
        *  1. Use RemoteObject to connect to a HTTPProxy destination.
        *  2. Use HTTPService to connect to a Remote destination.
        * 
        *  Also, verify that using any service to connect to a Message destination 
        *  does not cause an error, but a result should be received with empty body.
        * *****************************************************************************/
         
        import qa.mxunit.*;
    	import mx.rpc.http.HTTPService;
        import mx.rpc.events.*;
        import mx.messaging.messages.AsyncMessage; 
        import mx.messaging.events.*;
        import mx.rpc.remoting.RemoteObject;	             	
        import mx.logging.*;
        import mx.logging.targets.*;
        
        private var expectFault:Boolean;
              	       	        
        private function run():void
        {               
            MXUnitManager.detectTests(this, 10000);            
        }         
        
        /*******************************************************
        *  Test using RemoteObject against Messaging Destination        
        * ******************************************************/
        public function testRemoteObjectMessageDest():void
        {
            var id:String = "MyTransientTopic"; 
            var ro:RemoteObject = new RemoteObject(id);
			ro.addEventListener("result", resultHandler);
			ro.addEventListener("fault", faultHandler); 
            ro.callSomeFunction();  
            expectFault = false;   
        }

        /*******************************************************
        * Test using RemoteObject with HTTPProxy Destination     
        * ******************************************************/   
       public function testRemoteObjectHTTPProxyDest():void
        {            
            var id:String = "DefaultHTTP"; 
            var ro:RemoteObject = new RemoteObject(id);
			ro.addEventListener("result", resultHandler);
			ro.addEventListener("fault", faultHandler);    
            ro.callSomeFunction();
            expectFault = true;    
        }

        /*******************************************************
        * Test using HTTP service with Message destination        
         * ******************************************************/
         public function testHTTPServiceMessageDest():void
        {
            var ps:HTTPService = new HTTPService(id);
			ps.destination = "MyTransientTopic";                                                        
			ps.method="POST";            
			ps.useProxy=true;
			ps.addEventListener("result", resultHandler);
			ps.addEventListener("fault", faultHandler);
            ps.send({value: "test"});
            expectFault = false;                
        }

        /*******************************************************
        * Test using HTTP service with Remote destination 
        * ******************************************************/       
       public function testHTTPServiceRemoteDest():void
        {
            var ps:HTTPService = new HTTPService(id);
			ps.destination = "WeatherService";                                                        
			ps.method="POST";            
			ps.useProxy=true;
			ps.addEventListener("result", resultHandler);
			ps.addEventListener("fault", faultHandler);
            ps.send({value: "test"});    
            expectFault = true;            
        }

        private function resultHandler(event:Event):void
        {
            if (expectFault) {
				Assert.currentTest.doFail("Result NOT expected: " + event);            	
            }
            else
			{
            	Assert.currentTest.doPass("Result expected: "  + event);
			}        
            
        }
        
        private function faultHandler(event:FaultEvent):void
        {
            if (expectFault) {
            	Assert.currentTest.doPass("Fault expected: " + event.fault.faultString);
            }
            else
            {
            	Assert.currentTest.doFail("Fault NOT expected:" + event.fault.faultString);
            }
        } 
    ]]>
    </mx:Script>  
	     
</mx:Application>