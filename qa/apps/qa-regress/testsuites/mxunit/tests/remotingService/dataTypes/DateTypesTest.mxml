<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro" invoke="addAsync()"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        [Bindable]
        public var dotNet:String;
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;

        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;

        private var expectedValue:Date = new Date(1997,6,1);
        private var now:Date = new Date();
        private var expectedArray:Array = [expectedValue,null,now];
        
        
        public function addAsync():void
        {
        //Get runDotNet parameter from FlashVars or swf URL
        var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;
        dotNet = paramObj["runDotNet"];

            manager.currentTest.chain(ro, ["result", "fault"], testHandler);    
        }

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */        
        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));

            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
        
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                                 

            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoBooleanClassesAMF"],10000);
        }
        
        /**
        *    Test Java Date through amf channel
        **/
        public function testEchoDateAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Java Calendar through amf channel
        **/
        public function testEchoCalendarAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoCalendar(expectedValue);
            call.expected = expectedValue;
        }
        
         /**
        *    Test Java Date with null through amf channel
        **/
        public function testEchoDateNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDate(null);
            call.expected = null;
        }

         /**
        *    Test Java Date[] through amf channel
        **/
        public function testEchoDatesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDates(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date[] with some nulls in the array through amf channel
        **/
        public function testEchoDatesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDates([now,null,expectedValue]);
            call.expected = [now,null,expectedValue];
        }

        /**
        *    Test Java Date in  ArrayList   through amf channel
        **/
        public function testEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel, passing as actionscript arraycollection
        *    expected result : Array of Dates
        **/
        public function testArrayCollectionEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel, passing as actionscript arraycollection
        *    expected result : ArrayCollection of Dates
        **/
        public function testArrayCollectionEchoArrayListAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoVectorAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  HashSet   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoHashSetAMF():void
        {
        if (dotNet != "true")
        {
                ro.channelSet = amfChannel;
                var call:Object = ro.echoHashSet([now]);
                call.expected = [now];
        }
        }
        
        /**
        *    Test Java Date in  LinkedList   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoLinkedListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }


        //http
        /**
        *    Test Date through http channel
        **/
        public function testEchoDateHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Date with null value through http channel
        **/
        public function testEchoDateNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDate(null);
            call.expected = null;
        }

        /**
        *    Test Date[] through http channel
        **/
        public function testEchoDatesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDates(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Date[] with some nulls in array through http channel
        **/
        public function testEchoDatesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDates([now,null,expectedValue]);
            call.expected = [now,null,expectedValue];
        }
        
        /**
        *    Test Dates in ArrayList through http channel
        **/
        public function testEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in ArrayList through http channel sending as arraycollection
        **/
        public function testArrayCollectionEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in ArrayList through http channel sending as arraycollection
        **/
        public function testArrayCollectionEchoArrayListHTTPAC():void
        {
            ro.channelSet = httpChannelac;
        var parameters: ArrayCollection = new ArrayCollection(expectedArray);
            var call:Object = ro.echoArrayList(parameters);
            call.expected = parameters;
        }
        
        /**
        *    Test Dates in Vector through http channel sending as arraycollection
        **/
        public function testEchoVectorHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in HashSet through http channel sending as arraycollection
        **/
        public function testEchoHashSetHTTP():void
        {
        if (dotNet != "true")
        {
                ro.channelSet = httpChannel;
                var call:Object = ro.echoHashSet([now]);
                call.expected = [now];
        }
        }
        
        /**
        *    Test Dates in LinkedList through http channel sending as arraycollection
        **/
        public function testEchoLinkedListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }

  
        private function testHandler(e:Object):void
        {
            if (e is FaultEvent)
            {
                if ((e.token.expectFault))
                {
                    Assert.pass();    
                }
                else
                {
                    Assert.fail(e.faultEvent.faultString);
                }
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.token.expected,e.result);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>