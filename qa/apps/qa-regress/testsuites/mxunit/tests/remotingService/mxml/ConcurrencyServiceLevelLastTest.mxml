<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application  width='100%' height='100%' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
   <mx:RemoteObject destination="qa.echoservice.Echo" id="remote" concurrency="last">
        <mx:method name="echoInt" result="event.token.resultHandler()"
                        fault="event.token.faultHandler()"/>
    </mx:RemoteObject>
    <MXUnit xmlns="http://www.adobe.com/2006/flexqa" id="testLast" timeout="10000"/>
    <mx:Script>
    <![CDATA[
        import mx.utils.*;
        import flash.events.*;

        private var noPreviousResult:Boolean = true;
        private var delayPassTimer:Timer;
        private function delayPass(e:Event):void
        {
            delayPassTimer.stop();
            if (noPreviousResult)
            testLast.doPass("Only got last result");
        }
        private function lastResultHandler():void
        {
            //last call's response could come before the first two calls
            trace("lastResultHandler");
	        delayPassTimer = new Timer(2000,0);
	        delayPassTimer.addEventListener("timer",delayPass);
            delayPassTimer.start();
        }
        private function resultHandler():void
        {
            testLast.doFail("This call object should be void by the lastCall");
            noPreviousResult = false;
        }
        private function faultHandler():void
        {
            testLast.doFail("Should not throw error, it should make last call without any error message");
            noPreviousResult = false;
        }
        /**
        *  run RemoteObject test. issue three calls and the concurrency is last
        *  first two call should be void by the last Call, should not have result nor fault
        *  service is last
        **/
        public  function run():void
        {
            var firstCall:Object  = remote.echoInt(10);
            firstCall.resultHandler = resultHandler;
            firstCall.faultHandler =  faultHandler;
            var secondCall:Object = remote.echoInt(10);
            secondCall.resultHandler = resultHandler;
            secondCall.faultHandler =  faultHandler;
            var thirdCall:Object  = remote.echoInt(10);
            thirdCall.resultHandler = lastResultHandler;
            thirdCall.faultHandler = faultHandler;
        }
    ]]>
    </mx:Script>
</mx:Application>