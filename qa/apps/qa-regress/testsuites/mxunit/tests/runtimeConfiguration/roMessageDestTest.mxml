<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:qa="http://www.adobe.com/2006/flexqa" creationComplete="run()">  

    <!-- 
        The runtimeMessageDestModifiedTest uses the ROMessageDestination remote object to remove/create an existing 
        runtime destination and change its endpoint.  
        The next test (consumerSubscribeTest) pings the MessageDest_ToBeModified destination to verify that it was recreated
        correctly by the remote object.
    -->	
    <mx:RemoteObject destination="ROMessageDestination" id="ro" />
    
    <mx:Consumer id="con" destination="MessageDest_ToBeModified" />
    	
	<mx:Script>
	<![CDATA[
	    import qa.utils.TestTaskEvent;
	    import qa.utils.TestTask;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.rpc.events.*;
		import mx.rpc.remoting.*;
		import mx.messaging.*;		
		import mx.messaging.channels.*;
	    import mx.events.PropertyChangeEvent;

		private var msgDestination:String = "MessageDest_ToBeModified";
		private var t:TestTask;

        private function handler(event:Event):void {
            
            if (event is ResultEvent) 
            {
                Assert.assertTrue("Remote call ended sucessfully", true);
            } 
            else 
            {
                Assert.fail("Remote call faulted: " + FaultEvent(event).fault.faultString);                
            }
        }

		private function run():void {
            MXUnitManager.addTests(this,["runtimeMessageDestRemoveTest", "runtimeMessageDestCreateTest", "consumerSubscribeTest"], 3000);
		}

        /*
         * This test is checking if the remote object creates the MessageDest_ToBeModified destination
         */            
        public function runtimeMessageDestCreateTest():void {
            
			MXUnitManager.getInstance().currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handler);			
			ro.createDestination(msgDestination);
		}
        
        /*
         * This test is checking if the remote object removes MessageDest_ToBeModified destination
         */            
        public function runtimeMessageDestRemoveTest():void {
            
			MXUnitManager.getInstance().currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handler);			
			ro.removeDestination(msgDestination);
		}
 
        /*
         * This test is  checking if consumer can subscribe over the new channel specified in the modified 
         * MessageDest_ToBeModified:  qa-http-polling
         */
        public function consumerSubscribeTest():void
        {
			// Specify channel to ping with via AS
			var cs:ChannelSet = new ChannelSet();
            cs.addChannel(new HTTPChannel("someid", "http://{server.name}:{server.port}/qa-regress/messagebroker/httppolling"));
            con.channelSet = cs;
            t = new TestTask();
            MXUnitManager.getInstance().currentTest.chain(t,[TestTaskEvent.COMPLETED],consumerSubscribed); 
            con.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChanged);
            con.subscribe();
        }

        private function propertyChanged(event:PropertyChangeEvent):void
        {
            if (event.property == "subscribed")
            {
                if (event.oldValue == false && event.newValue == true)
                {
                    t.taskCompleted();
                }
            }                
        }
        private function consumerSubscribed(event:TestTaskEvent):void
        {
            if (event.type == TestTaskEvent.COMPLETED) 
            {
                Assert.assertTrue("Consumer subscribed sucessfully", true); 
            }
        }
		
	]]>
	</mx:Script>
    
</mx:Application>